/* generated by Svelte v3.16.7 */
import {
	SvelteElement,
	append,
	attr,
	children,
	claim_element,
	claim_space,
	claim_text,
	detach,
	element,
	flush,
	init,
	insert,
	listen,
	noop,
	not_equal,
	run_all,
	set_data,
	space,
	text
} from "./svelte-internal";

function create_fragment(ctx) {
	let div;
	let button0;
	let t0;
	let t1;
	let span;
	let t2;
	let t3;
	let button1;
	let t4;
	let dispose;

	return {
		c() {
			div = element("div");
			button0 = element("button");
			t0 = text("-");
			t1 = space();
			span = element("span");
			t2 = text(/*count*/ ctx[0]);
			t3 = space();
			button1 = element("button");
			t4 = text("+");
			this.c = noop;
			this.h();
		},
		l(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			button0 = claim_element(div_nodes, "BUTTON", {});
			var button0_nodes = children(button0);
			t0 = claim_text(button0_nodes, "-");
			button0_nodes.forEach(detach);
			t1 = claim_space(div_nodes);
			span = claim_element(div_nodes, "SPAN", {});
			var span_nodes = children(span);
			t2 = claim_text(span_nodes, /*count*/ ctx[0]);
			span_nodes.forEach(detach);
			t3 = claim_space(div_nodes);
			button1 = claim_element(div_nodes, "BUTTON", {});
			var button1_nodes = children(button1);
			t4 = claim_text(button1_nodes, "+");
			button1_nodes.forEach(detach);
			div_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(div, "class", "counter");

			dispose = [
				listen(button0, "click", /*click_handler*/ ctx[1]),
				listen(button1, "click", /*click_handler_1*/ ctx[2])
			];
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, button0);
			append(button0, t0);
			append(div, t1);
			append(div, span);
			append(span, t2);
			append(div, t3);
			append(div, button1);
			append(button1, t4);
		},
		p(ctx, [dirty]) {
			if (dirty & /*count*/ 1) set_data(t2, /*count*/ ctx[0]);
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div);
			run_all(dispose);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { count = 0 } = $$props;
	const click_handler = () => $$invalidate(0, count--, count);
	const click_handler_1 = () => $$invalidate(0, count++, count);

	$$self.$set = $$props => {
		if ("count" in $$props) $$invalidate(0, count = $$props.count);
	};

	return [count, click_handler, click_handler_1];
}

class Component extends SvelteElement {
	constructor(options) {
		super();
		this.shadowRoot.innerHTML = `<style>button{border:solid lightgray 1px;border-radius:4px;padding:10px}.counter{font-size:24px}</style>`;
		init(this, { target: this.shadowRoot }, instance, create_fragment, not_equal, { count: 0 });

		if (options) {
			if (options.target) {
				insert(options.target, this, options.anchor);
			}

			if (options.props) {
				this.$set(options.props);
				flush();
			}
		}
	}

	static get observedAttributes() {
		return ["count"];
	}

	get count() {
		return this.$$.ctx[0];
	}

	set count(count) {
		this.$set({ count });
		flush();
	}
}

customElements.define("x-counter", Component);
export default Component;