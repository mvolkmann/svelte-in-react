/* generated by Svelte v3.16.7 */
import {
	SvelteElement,
	append,
	children,
	claim_element,
	claim_space,
	claim_text,
	destroy_each,
	detach,
	element,
	empty,
	flush,
	init,
	insert,
	noop,
	not_equal,
	set_data,
	space,
	text
} from "./svelte-internal";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[2] = list[i];
	return child_ctx;
}

// (14:2) {:else}
function create_else_block(ctx) {
	let div;
	let t;

	return {
		c() {
			div = element("div");
			t = text("no obj prop passed");
		},
		l(nodes) {
			div = claim_element(nodes, "DIV", {});
			var div_nodes = children(div);
			t = claim_text(div_nodes, "no obj prop passed");
			div_nodes.forEach(detach);
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, t);
		},
		p: noop,
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

// (10:2) {#if obj}
function create_if_block(ctx) {
	let each_1_anchor;
	let each_value = Object.keys(/*obj*/ ctx[0]);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	return {
		c() {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			each_1_anchor = empty();
		},
		l(nodes) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(nodes);
			}

			each_1_anchor = empty();
		},
		m(target, anchor) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert(target, each_1_anchor, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*obj, Object*/ 1) {
				each_value = Object.keys(/*obj*/ ctx[0]);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		d(detaching) {
			destroy_each(each_blocks, detaching);
			if (detaching) detach(each_1_anchor);
		}
	};
}

// (11:4) {#each Object.keys(obj) as key}
function create_each_block(ctx) {
	let div;
	let t0_value = /*key*/ ctx[2] + "";
	let t0;
	let t1;
	let t2_value = /*obj*/ ctx[0][/*key*/ ctx[2]] + "";
	let t2;

	return {
		c() {
			div = element("div");
			t0 = text(t0_value);
			t1 = text(" = ");
			t2 = text(t2_value);
		},
		l(nodes) {
			div = claim_element(nodes, "DIV", {});
			var div_nodes = children(div);
			t0 = claim_text(div_nodes, t0_value);
			t1 = claim_text(div_nodes, " = ");
			t2 = claim_text(div_nodes, t2_value);
			div_nodes.forEach(detach);
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, t0);
			append(div, t1);
			append(div, t2);
		},
		p(ctx, dirty) {
			if (dirty & /*obj*/ 1 && t0_value !== (t0_value = /*key*/ ctx[2] + "")) set_data(t0, t0_value);
			if (dirty & /*obj*/ 1 && t2_value !== (t2_value = /*obj*/ ctx[0][/*key*/ ctx[2]] + "")) set_data(t2, t2_value);
		},
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

function create_fragment(ctx) {
	let div;
	let h3;
	let t0;
	let t1;

	function select_block_type(ctx, dirty) {
		if (/*obj*/ ctx[0]) return create_if_block;
		return create_else_block;
	}

	let current_block_type = select_block_type(ctx, -1);
	let if_block = current_block_type(ctx);

	return {
		c() {
			div = element("div");
			h3 = element("h3");
			t0 = text(/*title*/ ctx[1]);
			t1 = space();
			if_block.c();
			this.c = noop;
		},
		l(nodes) {
			div = claim_element(nodes, "DIV", {});
			var div_nodes = children(div);
			h3 = claim_element(div_nodes, "H3", {});
			var h3_nodes = children(h3);
			t0 = claim_text(h3_nodes, /*title*/ ctx[1]);
			h3_nodes.forEach(detach);
			t1 = claim_space(div_nodes);
			if_block.l(div_nodes);
			div_nodes.forEach(detach);
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, h3);
			append(h3, t0);
			append(div, t1);
			if_block.m(div, null);
		},
		p(ctx, [dirty]) {
			if (dirty & /*title*/ 2) set_data(t0, /*title*/ ctx[1]);

			if (current_block_type === (current_block_type = select_block_type(ctx, dirty)) && if_block) {
				if_block.p(ctx, dirty);
			} else {
				if_block.d(1);
				if_block = current_block_type(ctx);

				if (if_block) {
					if_block.c();
					if_block.m(div, null);
				}
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div);
			if_block.d();
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { obj = {} } = $$props;
	let { title = "" } = $$props;

	$$self.$set = $$props => {
		if ("obj" in $$props) $$invalidate(0, obj = $$props.obj);
		if ("title" in $$props) $$invalidate(1, title = $$props.title);
	};

	return [obj, title];
}

class Component extends SvelteElement {
	constructor(options) {
		super();
		init(this, { target: this.shadowRoot }, instance, create_fragment, not_equal, { obj: 0, title: 1 });

		if (options) {
			if (options.target) {
				insert(options.target, this, options.anchor);
			}

			if (options.props) {
				this.$set(options.props);
				flush();
			}
		}
	}

	static get observedAttributes() {
		return ["obj", "title"];
	}

	get obj() {
		return this.$$.ctx[0];
	}

	set obj(obj) {
		this.$set({ obj });
		flush();
	}

	get title() {
		return this.$$.ctx[1];
	}

	set title(title) {
		this.$set({ title });
		flush();
	}
}

customElements.define("x-take-object", Component);
export default Component;