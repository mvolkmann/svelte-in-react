/* generated by Svelte v3.16.7 */
import {
	SvelteElement,
	append,
	children,
	claim_element,
	claim_text,
	detach,
	element,
	flush,
	init,
	insert,
	noop,
	not_equal,
	set_data,
	text
} from "./svelte-internal";

function create_fragment(ctx) {
	let div;
	let t0;
	let t1;
	let t2;

	return {
		c() {
			div = element("div");
			t0 = text("Hello, ");
			t1 = text(/*name*/ ctx[0]);
			t2 = text("!");
			this.c = noop;
		},
		l(nodes) {
			div = claim_element(nodes, "DIV", {});
			var div_nodes = children(div);
			t0 = claim_text(div_nodes, "Hello, ");
			t1 = claim_text(div_nodes, /*name*/ ctx[0]);
			t2 = claim_text(div_nodes, "!");
			div_nodes.forEach(detach);
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, t0);
			append(div, t1);
			append(div, t2);
		},
		p(ctx, [dirty]) {
			if (dirty & /*name*/ 1) set_data(t1, /*name*/ ctx[0]);
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { name = "World" } = $$props;

	$$self.$set = $$props => {
		if ("name" in $$props) $$invalidate(0, name = $$props.name);
	};

	return [name];
}

class Component extends SvelteElement {
	constructor(options) {
		super();
		init(this, { target: this.shadowRoot }, instance, create_fragment, not_equal, { name: 0 });

		if (options) {
			if (options.target) {
				insert(options.target, this, options.anchor);
			}

			if (options.props) {
				this.$set(options.props);
				flush();
			}
		}
	}

	static get observedAttributes() {
		return ["name"];
	}

	get name() {
		return this.$$.ctx[0];
	}

	set name(name) {
		this.$set({ name });
		flush();
	}
}

customElements.define("x-greet", Component);
export default Component;